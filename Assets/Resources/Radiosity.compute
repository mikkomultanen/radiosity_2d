// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSClear
#pragma kernel CSSweep

Texture2D<float4> ShapesTexR;
Texture2D<float4> LightBufferR;
RWTexture2D<float4> LightBufferW;

float FeedbackMultiplier;
float Multiplier;
uint TexSize;
float4 SweepStart;
float2 SweepStep;

[numthreads(8,8,1)]
void CSClear (uint3 id : SV_DispatchThreadID)
{
    LightBufferW[id.xy] = LightBufferR.Load(id) * FeedbackMultiplier;
}

float4 energyToColor(float3 energy)
{
    float a = max(max(max(energy.r, energy.g), energy.b), 1.0/65536.0);
    return float4(energy / a, a);
}

float3 colorToEnergy(float4 color)
{
    return color.rgb * color.a;
}

[numthreads(8, 1, 1)]
void CSSweep (uint3 id : SV_DispatchThreadID)
{
    float2 pos = SweepStart.xy + id.x * SweepStart.zw;
    float3 energy = 0;
    float ds = length(SweepStep);
    float4 previousCol = 0;

    for (uint s = 0; s < TexSize; ++s)
    {
        uint3 texCoord = uint3(floor(pos.x), floor(pos.y), 0);
        if (texCoord.x >= 1 && texCoord.x < (TexSize - 1) && texCoord.y >= 1 && texCoord.y < (TexSize - 1))
        {
            float4 col = ShapesTexR.Load(texCoord);
            float3 colEnergy = col.rgb;
            bool fromWall = previousCol.a > 0.9999;
            bool toWall = col.a > 0.9999;
            float3 e;
            if (fromWall && toWall) {
                // Inside wall
                energy *= pow(0.6, ds);
                e = max(colEnergy, energy);
            } else {
                if (fromWall) {
                    energy = previousCol.rgb;
                }
                e = energy;
                if (toWall) {
                    energy = max(energy, colEnergy);
                } else {
                    energy = lerp(energy, colEnergy, col.a);
                }
            }
            LightBufferW[texCoord.xy] = energyToColor(colorToEnergy(LightBufferR.Load(texCoord)) + Multiplier * e);
            previousCol = col;
        }
        pos += SweepStep;
    }
}
